```
题目汇总：
自定义 v-model 的使用
$nextTick 的使用
ref 的使用
slot 的使用
动态组件与异步组件的使用
keep-alive 的使用
mixin 的使用
```

1. 自定义 v-model
   
   > 类似颜色选择器的东西

![自定义v-model](./resource/003/自定义v-model.png)
![自定义v-model](./resource/003/自定义v-model2.png)

2. \$nextTick

> Vue 是异步渲染，data 改变后 DOM 不会立刻渲染，\$nextTick 会在 DOM 渲染之后被触发，以获取最新 DOM 节点

![$nextTick的使用](./resource/003/$nextTick的使用.png)

3. ref

```javascript
<ul ref="ul1"></ul>;
ulElemet = this.$refs.ul1; // 通过这个方法获取元素
```

4. slot
   
   > 简单来说就是父组件想要往子组件里去插入一段内容

> 基本使用：

![slot基本使用-parent](./resource/003/slot基本使用-parent.png)
![slot基本使用-son](./resource/003/slot基本使用-son.png)

> 作用域插槽 ：

![slot作用域插槽-parent](./resource/003/slot作用域插槽-parent.png)
![slot作用域插槽-son](./resource/003/slot作用域插槽-son.png)

> 具名 插槽 ：

![slot具名插槽](./resource/003/slot具名插槽.png)

5. 动态、异步组件

> 动态组件：用法：:is= 'component-name';需要根据数据动态渲染的场景，即组件类型不确定

![动态组件1](./resource/003/动态组件1.png)
![动态组件2](./resource/003/动态组件2.png)

> 异步组件：当项目中有的组件非常大的时候，如果全部直接打包体积会非常大，是很影响性能的，这时候就要去异步加载。

- import()函数 按需加载，异步加载大组件
  ![异步加载import函数](./resource/003/异步加载import函数.png)

6. keep-alive

> 缓存组件，使组件不进行销毁，用于频繁切换但是不需要重复渲染的时候，常见于 Vue 性能优化的面试题目中

![keep-alive的使用](./resource/003/keep-alive的使用.png)

7. mixin

> 多个组件有相同的逻辑，抽离出来。minin 不是完美解决方案，会有一些问题。Vue3 提出的 Composition API 是解决这些问题。
> 使用场景如 ./ mixin 文件中是许多组件的相同的方法，就可以通过使用 mixin 引用进使用这个

![mixin组件内容](./resource/003/mixin组件内容.png)
![mixin使用方法](./resource/003/mixin使用方法.png)

> 缺点：变量来源不明确，不方便阅读，容易造成命名冲突，mixin 和组件可能出现多对多的关系，复杂度高

